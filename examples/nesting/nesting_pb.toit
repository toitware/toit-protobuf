// Code generated by protoc-gen-toit. DO NOT EDIT.
// source: nesting.proto

import protobuf as _protobuf
import core as _core

// ENUM START: MyEnum
MyEnum-UNKNOWN/int/*enum<MyEnum>*/ ::= 0
MyEnum-SET/int/*enum<MyEnum>*/ ::= 1
// ENUM END: .MyEnum

// MESSAGE START: .Foo
class Foo extends _protobuf.Message:
  s/string := ""

  constructor
      --s/string?=null:
    if s != null:
      this.s = s

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        s = r.read-primitive _protobuf.PROTOBUF-TYPE-STRING

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    w.write-primitive _protobuf.PROTOBUF-TYPE-STRING s --as-field=1

  num-fields-set -> int:
    return (s.is-empty ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-STRING s --as-field=1)

// MESSAGE END: .Foo

// MESSAGE START: .InnerMessage
// ENUM START: InnerMessage_MyEnum
InnerMessage-MyEnum-UNKNOWN/int/*enum<InnerMessage_MyEnum>*/ ::= 0
// ENUM END: .InnerMessage.MyEnum

// MESSAGE START: .InnerMessage.Foo
class InnerMessage-Foo extends _protobuf.Message:
  i/int/*enum<InnerMessage_MyEnum>*/ := 0

  constructor
      --i/int?/*enum<InnerMessage_MyEnum>?*/=null:
    if i != null:
      this.i = i

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        i = r.read-primitive _protobuf.PROTOBUF-TYPE-ENUM

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    w.write-primitive _protobuf.PROTOBUF-TYPE-ENUM i --as-field=1

  num-fields-set -> int:
    return (i == 0 ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-ENUM i --as-field=1)

// MESSAGE END: .InnerMessage.Foo

class InnerMessage extends _protobuf.Message:
  foo/InnerMessage-Foo := InnerMessage-Foo
  _enum/int/*enum<InnerMessage_MyEnum>*/ := 0

  constructor
      --foo/InnerMessage-Foo?=null
      --_enum/int?/*enum<InnerMessage_MyEnum>?*/=null:
    if foo != null:
      this.foo = foo
    if _enum != null:
      this._enum = _enum

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        foo = InnerMessage-Foo.deserialize r
      r.read-field 2:
        _enum = r.read-primitive _protobuf.PROTOBUF-TYPE-ENUM

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    foo.serialize w --as-field=1
    w.write-primitive _protobuf.PROTOBUF-TYPE-ENUM _enum --as-field=2

  num-fields-set -> int:
    return (foo.is-empty ? 0 : 1)
      + (_enum == 0 ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-embedded-message (foo.protobuf-size) --as-field=1)
      + (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-ENUM _enum --as-field=2)

// MESSAGE END: .InnerMessage

// MESSAGE START: .Message
class Message extends _protobuf.Message:
  foo/Foo := Foo
  enum-field/int/*enum<MyEnum>*/ := 0

  constructor
      --foo/Foo?=null
      --enum-field/int?/*enum<MyEnum>?*/=null:
    if foo != null:
      this.foo = foo
    if enum-field != null:
      this.enum-field = enum-field

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        foo = Foo.deserialize r
      r.read-field 2:
        enum-field = r.read-primitive _protobuf.PROTOBUF-TYPE-ENUM

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    foo.serialize w --as-field=1
    w.write-primitive _protobuf.PROTOBUF-TYPE-ENUM enum-field --as-field=2

  num-fields-set -> int:
    return (foo.is-empty ? 0 : 1)
      + (enum-field == 0 ? 0 : 1)

  protobuf-size -> int:
    return (_protobuf.size-embedded-message (foo.protobuf-size) --as-field=1)
      + (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-ENUM enum-field --as-field=2)

// MESSAGE END: .Message

