// Code generated by protoc-gen-toit. DO NOT EDIT.
// source: oneof.proto

import protobuf as _protobuf
import core as _core

// MESSAGE START: .MessageWithOneOf
class MessageWithOneOf extends _protobuf.Message:
  // ONEOF START: .MessageWithOneOf.value
  value_ := null
  value-oneof-case_/int? := null

  value-oneof-clear -> none:
    value_ = null
    value-oneof-case_ = null

  static VALUE-I/int ::= 1
  static VALUE-S/int ::= 2

  value-oneof-case -> int?:
    return value-oneof-case_

  value-i -> int:
    return value_

  value-i= value/int -> none:
    value_ = value
    value-oneof-case_ = VALUE-I

  value-s -> string:
    return value_

  value-s= value/string -> none:
    value_ = value
    value-oneof-case_ = VALUE-S

  // ONEOF END: .MessageWithOneOf.value

  constructor
      --value-i/int?=null
      --value-s/string?=null:
    if value-i != null:
      this.value-i = value-i
    if value-s != null:
      this.value-s = value-s

  constructor.deserialize r/_protobuf.Reader:
    r.read-message:
      r.read-field 1:
        value-i = r.read-primitive _protobuf.PROTOBUF-TYPE-UINT32
      r.read-field 2:
        value-s = r.read-primitive _protobuf.PROTOBUF-TYPE-STRING

  serialize w/_protobuf.Writer --as-field/int?=null --oneof/bool=false -> none:
    w.write-message-header this --as-field=as-field --oneof=oneof
    if value-oneof-case_ == VALUE-I:
      w.write-primitive _protobuf.PROTOBUF-TYPE-UINT32 value_ --as-field=VALUE-I --oneof
    if value-oneof-case_ == VALUE-S:
      w.write-primitive _protobuf.PROTOBUF-TYPE-STRING value_ --as-field=VALUE-S --oneof

  num-fields-set -> int:
    return (value-oneof-case_ == null ? 0 : 1)

  protobuf-size -> int:
    return (value-oneof-case_ == VALUE-I ? (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-UINT32 value-i --as-field=1) : 0)
      + (value-oneof-case_ == VALUE-S ? (_protobuf.size-primitive _protobuf.PROTOBUF-TYPE-STRING value-s --as-field=2) : 0)

// MESSAGE END: .MessageWithOneOf

